
      #undef MICROSPLAT_SAMPLE_TEX2D_LOD
      #undef MICROSPLAT_SAMPLE_TEX2D_SAMPLER_LOD
      #undef MICROSPLAT_SAMPLE_TEX2DARRAY_GRAD
      #undef MICROSPLAT_SAMPLE_TEX2D_SAMPLER_GRAD

      #define MICROSPLAT_SAMPLE_TEX2D_LOD(tex,coord,lod)                    SAMPLE_TEXTURE2D_LOD(tex,sampler_##tex, coord, lod)
      #define MICROSPLAT_SAMPLE_TEX2DARRAY_GRAD(tex,coord,dx,dy)                 SAMPLE_TEXTURE2D_GRAD(tex,sampler_##tex,coord,dx,dy)
      #define MICROSPLAT_SAMPLE_TEX2D_SAMPLER_GRAD(tex,samp,coord,dx,dy)    SAMPLE_TEXTURE2D_GRAD(tex,sampler_##samp,coord,dx,dy)
      #define MICROSPLAT_SAMPLE_TEX2D_SAMPLER_LOD(tex, samp, coord, lod)    SAMPLE_TEXTURE2D_LOD(tex, sampler_##samp, coord, lod)

      inline half3 UnpackNormal(half4 packednormal)
      {
         fixed3 normal;
         normal.xy = packednormal.wy * 2 - 1;
         normal.z = sqrt(1 - normal.x*normal.x - normal.y * normal.y);
         return normal;
      }
      
      
         struct AttributesMesh
        {
            float3 positionOS : POSITION;
            float3 normalOS : NORMAL; // optional
            float4 tangentOS : TANGENT; // optional
            float4 uv0 : TEXCOORD0; // optional
            float4 uv1 : TEXCOORD1; // optional
            float4 uv2 : TEXCOORD2; // optional
            float4 color : COLOR; // optional
            #if UNITY_ANY_INSTANCING_ENABLED
            uint instanceID : INSTANCEID_SEMANTIC;
            #endif // UNITY_ANY_INSTANCING_ENABLED

            // this is a little, ugh, but it would require a much
            // bigger refactor to not have these in AttributeMesh though
            // It seems fine on osx, but on windows this limits us to max 4
            // textures do to texcoord maximums.. Instead we should push another
            // structure the tessellation pipeline...

            #if _TESSDISTANCE && (_MICROMESHVERTEX || _MICROMESHDIGGER || _MEGASPLAT) 
            DECALREMSVERTEXSEMANTIC
            #endif

        };
      
 
 // Here's a novel idea, unity- instead of defining multiple copies of the same stucture along with copy functions to move between them with different
 // variable names, why not just define 1 structure and use it everywhere.
 
        
        // Generated Type: MeshToPS
        struct MeshToPS
        {
            float4 positionCS : SV_Position;
            float3 positionRWS : TEXCOORD0; 
            float3 normalWS : TEXCOORD1; 
            float4 tangentWS : TEXCOORD2; 
            float4 texCoord0 : TEXCOORD3; 
            float4 texCoord1 : TEXCOORD4; 
            float4 texCoord2 : TEXCOORD5;
            float4 color : TEXCOORD6;
            #if UNITY_ANY_INSTANCING_ENABLED
            uint instanceID : CUSTOM_INSTANCE_ID;
            #endif // UNITY_ANY_INSTANCING_ENABLED
            #if defined(SHADER_STAGE_FRAGMENT) && defined(VARYINGS_NEED_CULLFACE)
            FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
            #endif // defined(SHADER_STAGE_FRAGMENT) && defined(VARYINGS_NEED_CULLFACE)

            DECALREMSVERTEXSEMANTIC
        };

        

      #define UnityObjectToWorldNormal(normal) mul(GetObjectToWorldMatrix(), normal)
      
      Input DescToInput(SurfaceDescriptionInputs IN, MeshToPS i)
      {
        Input s = (Input)0;
        s.TBN = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        s.worldNormal = IN.WorldSpaceNormal;
        s.worldPos = GetAbsolutePositionWS(IN.WorldSpacePosition);
        s.viewDir = IN.TangentSpaceViewDirection;
        s.uv_Control0 = IN.uv0.xy;
        

        #if _MICROMESH && _MESHUV2
            s.uv_Diffuse = IN.uv.xy1;
        #endif

        #if _SRPTERRAINBLEND
            s.color = IN.VertexColor;
        #endif
        CopyMSVertexData(i, s);
        
        return s;
     }
     
     
struct VaryingsToPS
{
    MeshToPS vmesh;
#ifdef VARYINGS_NEED_PASS
    VaryingsPassToPS vpass;
#endif
};

struct PackedVaryingsToPS
{
#ifdef VARYINGS_NEED_PASS
    PackedVaryingsPassToPS vpass;
#endif
    MeshToPS vmesh;

    UNITY_VERTEX_OUTPUT_STEREO
};

PackedVaryingsToPS PackVaryingsToPS(VaryingsToPS input)
{
    PackedVaryingsToPS output = (PackedVaryingsToPS)0;;
    output.vmesh = input.vmesh;
#ifdef VARYINGS_NEED_PASS
    output.vpass = PackVaryingsPassToPS(input.vpass);
#endif

    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);
    return output;
}



     #if _MICROVERTEXMESH || _MICRODIGGERMESH || _MEGASPLAT
      appdata ToAppData(AttributesMesh i)
      {
         appdata a = (appdata)0;
         a.color = i.color;
         a.texcoord1 = i.uv1;
         return a;
      }
      #endif
      
      void FromInput(inout MeshToPS o, inout Input i)
      {
         CopyMSVertexData(i, o);
      }

      
      


     #define TESSELLATION_INTERPOLATE_BARY(name, bary) output.name = input0.name * bary.x +  input1.name * bary.y +  input2.name * bary.z
     

     
       //MS_EXTENSIONS

     

         

